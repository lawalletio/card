generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Card {
  uuid       String  @default(dbgenerated("gen_random_uuid()")) @map("uuid") @db.Uuid
  id         String  @map("id")
  k0         String  @map("k0")
  k1         String  @map("k1")
  k2         String  @map("k2")
  k3         String  @map("k3")
  k4         String  @map("k4")
  counter    Int     @default(0) @map("counter")
  status     String  @map("status")
  npub       String? @map("npub")
  designUuid String? @map("design_uuid") @db.Uuid

  design      CardDesign?  @relation(fields: [designUuid], references: [uuid], onUpdate: NoAction, onDelete: NoAction)
  delegations Delegation[] @relation
  limits      Limit[]      @relation
  payments    Payment[]    @relation

  @@id([uuid])
  @@map("cards")
}

model CardDesign {
  uuid String @default(dbgenerated("gen_random_uuid()")) @map("uuid") @db.Uuid
  name String @map("name")

  cards Card[] @relation

  @@id([uuid])
  @@map("card_design")
}

model Delegation {
  id              Int    @default(autoincrement())
  cardUuid        String @map("card_uuid") @db.Uuid
  since           BigInt @map("since")
  until           BigInt @map("until")
  conditions      String @map("conditions")
  delegationToken String @map("delegation_token")

  card Card @relation(fields: [cardUuid], references: [uuid], onUpdate: NoAction, onDelete: NoAction)

  @@id([id])
  @@map("delegations")
}

model Limit {
  cardUuid String @map("card_uuid") @db.Uuid
  token    String @map("token")
  delta    Int    @map("delta")
  amount   BigInt @map("amount")

  card Card @relation(fields: [cardUuid], references: [uuid], onUpdate: NoAction, onDelete: NoAction)

  @@id([cardUuid, token, delta])
  @@map("limits")
}

model Payment {
  uuid      String @default(dbgenerated("gen_random_uuid()")) @map("uuid") @db.Uuid
  cardUuid  String @map("card_uuid") @db.Uuid
  createdAt BigInt @map("created_at")
  status    String @map("status")

  card          Card           @relation(fields: [cardUuid], references: [uuid], onUpdate: NoAction, onDelete: NoAction)
  paymentTokens PaymentToken[] @relation

  @@id([uuid])
  @@map("payments")
}

model PaymentToken {
  paymentUuid String @map("payment_uuid") @db.Uuid
  token       String @map("token")
  amount      BigInt @map("amount")

  payment Payment @relation(fields: [paymentUuid], references: [uuid], onUpdate: NoAction, onDelete: NoAction)

  @@id([paymentUuid, token])
  @@map("payment_tokens")
}
